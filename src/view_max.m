function view_max() % autogenerated function wrapper
    % This .m file "view_maxz.m" plots the maxz LTA values calculated
    % with maxzlta.m or other similar values as a color map
    % needs re3, gx, gy, stri
    %
    % define size of the plot etc.
    %
    % turned into function by Celso G Reyes 2017
    
    ZG=ZmapGlobal.Data; % used by get_zmap_globals
    if isempty(name)
        name = '  '
    end
    think
    report_this_filefun(mfilename('fullpath'));
    co = 'w';
    
    if det == 'pro'
        re3 = old;
        l = re3 < 2.57;
        re3(l) = ones(1,length(find(l)))*2.57;
        pr = 0.0024 + 0.03*(re3 - 2.57).^2;
        pr = (1-1./(exp(pr)));
        re3 = pr;
    end   % if det = pro
    
    % Find out if figure already exists
    %
    figNumber=findobj('Type','Figure','-and','Name','Z-Value-Map');
    
    
    % This is the info window text
    %
    ttlStr='The Z-Value Map Window                        ';
    hlpStr1zmap= ...
        ['                                                '
        ' This window displays seismicity rate changes   '
        ' as z-values using a color code. Negative       '
        ' z-values indicate an increase in the seismicity'
        ' rate, positive values a decrease.              '
        ' Some of the menu-bar options are               '
        ' described below:                               '
        '                                                '
        ' Threshold: You can set the maximum size that   '
        '   a volume is allowed to have in order to be   '
        '   displayed in the map. Therefore, areas with  '
        '   a low seismicity rate are not displayed.     '
        '   edit the size (in km) and click the mouse    '
        '   outside the edit window.                     '
        'FixAx: You can chose the minimum and maximum    '
        '        values of the color-legend used.        '
        'Polygon: You can select earthquakes in a        '
        ' polygon either by entering the coordinates or  '
        ' defining the corners with the mouse            '];
    hlpStr2zmap= ...
        ['                                                '
        'Circle: Select earthquakes in a circular volume:'
        '      Ni, the number of selected earthquakes can'
        '      be edited in the upper right corner of the'
        '      window.                                   '
        ' Refresh Window: Redraws the figure, erases     '
        '       selected events.                         '
        
        ' zoom: Selecting Axis -> zoom on allows you to  '
        '       zoom into a region. Click and drag with  '
        '       the left mouse button. type <help zoom>  '
        '       for details.                             '
        ' Aspect: select one of the aspect ratio options '
        ' Text: You can select text items by clicking.The'
        '       selected text can be rotated, moved, you '
        '       can change the font size etc.            '
        '       Double click on text allows editing it.  '
        '                                                '
        '                                                '];
    
    % Set up the Seismicity Map window Enviroment
    %
    if isempty(figNumber)
        zmap = figure_w_normalized_uicontrolunits( ...
            'Name','Z-Value-Map',...
            'NumberTitle','off', ...
            'NextPlot','replace', ...
            'backingstore','on',...
            'Visible','off', ...
            'Position',[ (fipo(3:4) - [600 400]) ZmapGlobal.Data.map_len]);
        
        uicontrol('Units','normal',...
            'Position',[.0 .93 .08 .06],'String','Print ',...
            'callback',@callbackfun_001)
        
        callbackStr= ...
            ['f1=gcf; f2=gpf; set(f1,''Visible'',''off'');close(zmap);', ...
            'if f1~=f2, figure(map);done; end'];
        
        uicontrol('Units','normal',...
            'Position',[.0 .75 .08 .06],'String','Close ',...
            'callback',@callbackfun_002)
        
        uicontrol('Units','normal',...
            'Position',[.0 .85 .08 .06],'String','Info ',...
            'callback',@callbackfun_003);
        
        
        uicontrol('Units','normal',...
            'Position',[.92 .80 .08 .05],'String','set ni',...
            'callback',@callbackfun_020)
        
        create_my_menu();
        
        set_nia = uicontrol('style','edit','value',ni,'string',num2str(ni));
        set(set_nia,'callback',@callbackfun_021);
        set(set_nia,'units','norm','pos',[.94 .85 .06 .05],'min',10,'max',10000);
        nilabel = uicontrol('style','text','units','norm','pos',[.90 .85 .04 .05]);
        set(nilabel,'string','ni:','background',[.7 .7 .7]);
        
        % tx = text(0.07,0.95,[name],'Units','Norm','FontSize',18,'Color','k','FontWeight','bold');
        
        tresh = max(max(r)); re4 = re3;
        nilabel2 = uicontrol('style','text','units','norm','pos',[.60 .92 .25 .06]);
        set(nilabel2,'string','MinRad (in km):','background',color_fbg);
        set_ni2 = uicontrol('style','edit','value',tresh,'string',num2str(tresh),...
            'background','y');
        set(set_ni2,'callback',@callbackfun_022); %TOFIX callback does nothing!
        set(set_ni2,'units','norm','pos',[.85 .92 .08 .06],'min',0.01,'max',10000);
        
        uicontrol('Units','normal',...
            'Position',[.95 .93 .05 .05],'String','Go ',...
            'callback',@callbackfun_023)
        
        colormap(jet)
        
    end   % This is the end of the figure setup
    
    % Now lets plot the color-map of the z-value
    %
    figure(zmap);
    delete(gca)
    delete(gca)
    delete(gca)
    % delete(sizmap);
    reset(gca)
    cla
    hold off
    watchon;
    set(gca,'visible','off','FontSize',ZmapGlobal.Data.fontsz.m,'FontWeight','bold',...
        'FontWeight','bold','LineWidth',1.5,...
        'Box','on','SortMethod','childorder')
    
    rect = [0.18,  0.10, 0.7, 0.75];
    rect1 = rect;
    
    % find max and min of data for automatic scaling
    %
    ZG.maxc = max(max(re3));
    ZG.maxc = fix(ZG.maxc)+1;
    ZG.minc = min(min(re3));
    ZG.minc = fix(ZG.minc)-1;
    
    % set values gretaer tresh = nan
    %
    re4 = re3;
    [len, ncu] = size(cumuall);
    %s = cumuall(len,:);
    %
    [n1, n2] = size(cumuall);
    s = cumuall(n1,:);
    normlap2(ll)= s(:);
    %construct a matrix for the color plot
    r=reshape(normlap2,length(yvect),length(xvect));
    
    
    
    %r = reshape(cumuall(len,:),length(gy),length(gx));
    l = r > tresh;
    re4(l) = zeros(1,length(find(l)))*nan;
    
    % plot image
    %
    orient landscape
    set(gcf,'PaperPosition',[ 0.1 0.1 8 6])
    axes('position',rect)
    hold on
    pco1 = pcolor(gx,gy,re4);
    axis([ s2 s1 s4 s3])
    
    if sha == 'fl'
        shading flat
    else
        shading interp
    end
    
    if fre == 1
        caxis([fix1 fix2])
    end
    
    if  in == 'per'
        coma = jet;
        coma = coma(64:-1:1,:);
        colormap(coma)
    end
    set(gca,'dataaspect',[1 cosd(mean(ZG.a.Latitude)) 1]);
    
    title([name ' (' in '); ' num2str(t0b) ' to ' num2str(teb) ' - cut at ' num2str(it) '; iwl = ' num2str(iwl2) ' yr'],'FontSize',ZmapGlobal.Data.fontsz.m,...
        'Color','k','FontWeight','bold')
    
    xlabel('Longitude [deg]','FontWeight','bold','FontSize',ZmapGlobal.Data.fontsz.m)
    ylabel('Latitude [deg]','FontWeight','bold','FontSize',ZmapGlobal.Data.fontsz.m)
    
    % plot overlay
    %
    overlay
    set(ploeq,'MarkerSize',ZG.ms6,'Marker',ty,'Color',co,'visible',vi);
    
    set(gca,'visible','on','FontSize',ZmapGlobal.Data.fontsz.m,'FontWeight','bold',...
        'FontWeight','bold','LineWidth',1.5,...
        'Box','on','TickDir','out')
    h1 = gca;
    hzma = gca;
    
    % Create a colobar
    %
    h5 = colorbar('horiz');
    set(h5,'Pos',[0.25 0.09 0.5 0.05],'TickDir','out',...
        'FontWeight','bold','FontSize',ZmapGlobal.Data.fontsz.m','YTick',[]')
    
    %  Text Object Creation
    txt1 = text(...
        'Color',[ 0 0 0 ],...
        'EraseMode','normal',...
        'Units','normalized',...
        'Position',[ -0.20 -0.2 0 ],...
        'Rotation',[ 0 ],...
        'FontSize',ZmapGlobal.Data.fontsz.m,....
        'FontWeight','bold',...
        'String','z-value:');
    if in =='per'
        set(txt1,'String','Change in %')
    end
    if det =='pro'
        set(txt1,'String','Probability')
    end
    if det =='res'
        set(txt1,'String','Radius in km')
    end
    
    % Make the figure visible
    %
    set(gca,'visible','on','FontSize',ZmapGlobal.Data.fontsz.m,'FontWeight','bold',...
        'FontWeight','bold','LineWidth',1.5,'Color','k',...
        'Box','on','TickDir','out')
    figure(zmap);
    %sizmap = signatur('ZMAP','',[0.01 0.04]);
    %set(sizmap,'Color','k')
    axes(h1)
    watchoff(zmap)
    done
    
    %% ui functions
    % TODO Create Select MENU - select eq in circle, polygon, refresh
    function create_my_menu()
        add_menu_divider();
        op1 = uimenu('Label',' Tools ');
        uimenu(op1,'Label','ZMAP Menu', 'callback',@callbackfun_004)
        uimenu(op1,'Label','Plot Map in Lambert projection using m_map ', 'callback',@callbackfun_005)
        uimenu(op1,'Label','Fix color (z) scale', 'callback',@callbackfun_006)
        uimenu(op1,'Label','Histogram of z-values', 'callback',@callbackfun_007)
        uimenu(op1,'Label','Probability Map', 'callback',@callbackfun_008)
        uimenu(op1,'Label','Back to z-value Map', 'callback',@callbackfun_009)
        uimenu(op1,'Label','Colormap InvertGray', 'callback',@callbackfun_010)
        uimenu(op1,'Label','Colormap Invertjet',...
            'callback',@callbackfun_011)
        
        uimenu(op1,'Label','Resolution Map', 'callback',@callbackfun_012)
        uimenu(op1,'Label','Show Grid ',...
            'callback',@callbackfun_013)
        uimenu(op1,'Label','Show Circles ', 'callback',@callbackfun_014)
        uimenu(op1,'Label','shading flat', 'callback',@callbackfun_015)
        uimenu(op1,'Label','shading interpolated',...
            'callback',@callbackfun_016)
        uimenu(op1,'Label','Brigten +0.4',...
            'callback',@callbackfun_017)
        uimenu(op1,'Label','Brigten -0.4',...
            'callback',@callbackfun_018)
        
        uimenu(op1,'Label','Redraw Overlay',...
            'callback',@callbackfun_019)
    end
    
    %% callback functions
    function callbackfun_001(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        myprint;
    end
    
    function callbackfun_002(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        eval(callbackStr);
    end
    
    function callbackfun_003(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        zmaphelp(ttlStr,hlpStr1zmap,hlpStr2zmap);
    end
    
    function callbackfun_004(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        zmapmenu ;
    end
    
    function callbackfun_005(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        plotmap ;
    end
    
    function callbackfun_006(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        fixax2 ;
    end
    
    function callbackfun_007(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        zhist;
    end
    
    function callbackfun_008(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        det = 'pro';
        fre = 0;
        view_max;
    end
    
    function callbackfun_009(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        det = 'nop';
        fre = 0;
        re3 = old;
        view_max;
    end
    
    function callbackfun_010(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        g=gray;
        g = g(64:-1:1,:);
        colormap(g);
        brighten(.4);
    end
    
    function callbackfun_011(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        g=jet;
        g = g(64:-1:1,:);
        colormap(g);
    end
    
    function callbackfun_012(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        re3 = r;
        fre = 0;
        det = 'res';
        view_max;
    end
    
    function callbackfun_013(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        plot(newgri(:,1),newgri(:,2),'+k');
    end
    
    function callbackfun_014(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        plotci2;
    end
    
    function callbackfun_015(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        sha='fl';
        axes(hzma);
        shading flat;
    end
    
    function callbackfun_016(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        sha='in';
        axes(hzma);
        shading interp;
    end
    
    function callbackfun_017(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        axes(hzma);
        brighten(0.4);
    end
    
    function callbackfun_018(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        axes(hzma);
        brighten(-0.4);
    end
    
    function callbackfun_019(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        hold on;
        overlay_;
    end
    
    function callbackfun_020(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        ni=str2num(set_nia.String);
        'String';
        num2str(ni);
    end
    
    function callbackfun_021(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
    end
    
    function callbackfun_022(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        tresh=str2double(set_ni2.String);
        set_ni2.String=num2str(tresh);
    end
    
    function callbackfun_023(mysrc,myevt)
        % automatically created callback function from text
        callback_tracker(mysrc,myevt,mfilename('fullpath'));
        think;
        pause(1);
        re4 =re3;
        view_max;
    end
    
end
