function plot_McBwtime(sPar) % autogenerated function wrapper
    % Script: plot_McBwtime.m
    %
    % Script to plot Mc and b as a function of time using the bootstrap
    % approach
    % Uses the result matrix from calc_McBwtime
    % updated: 14.02.2005
    % J. Woessner
    % turned into function by Celso G Reyes 2017
    
    ZG=ZmapGlobal.Data; % used by get_zmap_globals
    
    % Get input
    
    % Initial values
    nSampleSize = 500;
    nOverlap = 4;
    nMethod = 1;
    nBstSample = 200;
    nMinNumberevents = 50;
    fBinning = 0.1;
    nWindowSize = 5;
    fMcCorr = 0;
    inpr1=1; % default method
    figure_w_normalized_uicontrolunits(...
        'Name','Mc Input Parameter',...
        'NumberTitle','off', ...
        'NextPlot','new', ...
        'units','points',...
        'Visible','off', ...
        'Position',[ 200 200 500 200]);
    axis off
    
    % Input parameters
    % Get list of Mc computation possibilities
    [labelList2] = calc_Mc;
    %labelList2=[' Max. curvature (MAXC) |Fixed Mc (Mc = Mmin) | GFT-90% | GFT-95% | Best (?) combination (Mc95 - Mc90 - max curvature) | EMR-method | MBS-method (Shi) | MBS-method (Bst)'];
    labelPos = [0.08 0.86  0.8  0.08];
    hndl2=uicontrol(...
        'Style','popup',...
        'Position',labelPos,...
        'Units','normalized',...
        'String',labelList2,...
        'callback',@callbackfun_001);
    set(hndl2,'value',inpr1);
    
    field1 = uicontrol('Style','edit',...
        'Position',[.35 .75 .12 .08],...
        'Units','normalized','String',num2str(nSampleSize),...
        'callback',@callbackfun_002);
    
    field2 = uicontrol('Style','edit',...
        'Position',[.35 .65 .12 .08],...
        'Units','normalized','String',num2str(nOverlap),...
        'callback',@callbackfun_003);
    
    field3 = uicontrol('Style','edit',...
        'Position',[.35 .55 .12 .08],...
        'Units','normalized','String',num2str(nBstSample),...
        'callback',@callbackfun_004);
    
    field4 = uicontrol('Style','edit',...
        'Position',[.35 .35 .12 .08],...
        'Units','normalized','String',num2str(fBinning),...
        'callback',@callbackfun_005);
    
    field5 = uicontrol('Style','edit',...
        'Position',[.35 .25 .12 .08],...
        'Units','normalized','String',num2str(nWindowSize),...
        'callback',@callbackfun_006);
    
    field6 = uicontrol('Style','edit',...
        'Position',[.35 .45 .12 .08],...
        'Units','normalized','String',num2str(fMcCorr),...
        'callback',@callbackfun_007);
    
    field7 = uicontrol('Style','edit',...
        'Position',[.7 .75 .12 .08],...
        'Units','normalized','String',num2str(nMinNumberevents),...
        'callback',@callbackfun_008);
    
    close_button=uicontrol('Style','Pushbutton',...
        'Position',[.60 .05 .15 .12 ],...
        'Units','normalized','callback',@callbackfun_cancel,'String','Cancel');
    
    go_button1=uicontrol('Style','Pushbutton',...
        'Position',[.20 .05 .15 .12 ],...
        'Units','normalized',...
        'callback',@callbackfun_go,...
        'String','Go');
    
    txt1 = text(...
        'Position',[0.01 0.82 0 ],...
        'HorizontalAlignment','Left',...
        'FontSize',ZmapGlobal.Data.fontsz.s ,...
        'String',' Sample window size');
    
    txt2 = text(...
        'Position',[0.01 0.7 0 ],...
        'HorizontalAlignment','Left',...
        'FontSize',ZmapGlobal.Data.fontsz.s ,...
        'String',' Overlap');
    
    txt3 = text(...
        'Position',[0.01 0.58 0 ],...
        'HorizontalAlignment','Left',...
        'FontSize',ZmapGlobal.Data.fontsz.s ,...
        'String',' Bootstraps');
    
    txt4 = text(...
        'Position',[0.01 0.34 0 ],...
        'HorizontalAlignment','Left',...
        'FontSize',ZmapGlobal.Data.fontsz.s ,...
        'String',' Binning');
    
    txt5 = text(...
        'Position',[0.01 0.23 0 ],...
        'HorizontalAlignment','Left',...
        'FontSize',ZmapGlobal.Data.fontsz.s ,...
        'String',' Smooth plot');
    
    txt6 = text(...
        'Position',[0.01 0.46 0 ],...
        'HorizontalAlignment','Left',...
        'FontSize',ZmapGlobal.Data.fontsz.s ,...
        'String','Mc correction');
    
    txt7 = text(...
        'Position',[0.50 0.82 0 ],...
        'HorizontalAlignment','Left',...
        'FontSize',ZmapGlobal.Data.fontsz.s ,...
        'String','Minimum number');
    
    set(gcf,'visible','on');
    watchoff
    
    function my_calculate()
        
        % Set minimum number to number of moving window
        %nMinNumberevents = nSampleSize;
        % Calulate time series
        ZG.newt2.sort('Date');
        [mResult] = calc_McBwtime(ZG.newt2, nSampleSize, nOverlap, nMethod, nBstSample, nMinNumberevents, fBinning,fMcCorr);
        errbarParams={'LineStyle','-.','Linewidth',2,'Color',[0.5 0.5 0.5]};
        
        % Plot Mc time series
        if sPar == 'mc'
            fig = figure_w_normalized_uicontrolunits('tag','Mc time series', 'visible','on', 'Name','Mc time series');
            resultCol=2;
            stdevcol=3;
            DisplayName='min Mag. Completeness (Mc)';
            errNames={'Mc - std', 'Mc + std'};
            myYLabel='Mc';
            myLegend={'Mc','\delta Mc'};
        else
            % plot B-value
            fig=figure_w_normalized_uicontrolunits('tag','b-value time series', 'visible','on', 'Name','b-value time series');
            resultCol=4;
            stdevcol=3;
            DisplayName='b-value';
            errNames={'b - std', 'b + std'};
            myYLabel='b-value';
            myLegend={'b-value','\delta b'};
        end
        
        y = filter(ones(1,nWindowSize)/nWindowSize,1,mResult(:,resultCol)); %was mMc or mB
        y(1:nWindowSize,1)=mResult(1:nWindowSize,resultCol);
        
        yStd = filter(ones(1,nWindowSize)/nWindowSize,1,mResult(:,stdevcol)); % was mMcstd1 or mBstd1
        yStd(1:nWindowSize,1)=mResult(1:nWindowSize,stdevcol);
        
        x = mResult(:,1);
        
        ax=axes(fig);
        plot(ax, x, y, '-', 'Linewidth', 2, 'Color', [0.2 0.2 0.2],'DisplayName',DisplayName);
        ax.NextPlot='add';
        plot(ax, x, y-yStd, errbarParams{:},'DisplayName',errNames{1});
        plot(ax, x, y+yStd, errbarParams{:},'DisplayName',errNames{2});
        xlabel(ax,'Time / [dec. year]','Fontweight','bold','FontSize',12)
        ylabel(ax,myYLabel,'Fontweight','bold','FontSize',12);
        ax.NextPlot='replace';
        
        xlim(ax,[min(x) max(x)])
        ylim(ax, [floor(min(y)) ceil(max(y))]);
        
        l1=legend(ax,myLegend{:});
        set(l1,'Fontweight','bold')
        
        set(ax,'Fontweight','bold','FontSize',10,'Linewidth',2,'Tickdir','out')
    end
    
    
    function callbackfun_001(mysrc,~)
        nMethod=mysrc.Value;
    end
    
    function callbackfun_002(mysrc,~)
        nSampleSize=str2double(mysrc.String);
    end
    
    function callbackfun_003(mysrc,~)
        nOverlap=str2double(mysrc.String);
    end
    
    function callbackfun_004(mysrc,~)
        nBstSample=str2double(mysrc.String);
    end
    
    function callbackfun_005(mysrc,~)
        fBinning=str2double(mysrc.String);
    end
    
    function callbackfun_006(mysrc,~)
        nWindowSize=str2double(mysrc.String);
    end
    
    function callbackfun_007(mysrc,~)
        fMcCorr=str2double(mysrc.String);
    end
    
    function callbackfun_008(mysrc,~)
        nMinNumberevents=str2double(mysrc.String);
    end
    
    function callbackfun_cancel(mysrc,~)
        close;
    end
    
    function callbackfun_go(mysrc,~)
        inpr1=hndl2.Value;
        close;
        my_calculate();
    end
    
end
