function bvalgrid() % autogenerated function wrapper
    % This subroutine assigns creates a grid with
    % spacing dx,dy (in degreees). The size will
    % be selected interactively. The bvalue in each
    % volume around a grid point containing ni earthquakes
    % will be calculated as well as the magnitude
    % of completness
    %   Stefan Wiemer 1/95
    % turned into function by Celso G Reyes 2017
    
    ZG=ZmapGlobal.Data; % used by get_zmap_globals
    
    %TODO: have this check for an already selected polygon, and use these points
    
    report_this_filefun(mfilename('fullpath'));
    
    % get the grid parameter
    % initial values
    %
    dx = 1.00;
    dy = 1.00 ;
    ni = 100;
    ra = ZG.ra;
    Nmin = 50;
    fMcFix=2.2;
    nBstSample=100;
    fMccorr = 0.2;
    fBinning = 0.1;
    stan2 = NaN;
    stan = NaN;
    prf = NaN;
    av = NaN;
    fStdDevB = NaN;
    fStdDevMc = NaN;
    bGridEntireArea = false;
    bCreateGrid = true;
    bLoadGrid = ~bCreateGrid;
    bUseNiEvents= true;
    lab1=' ';
    
    %% make the interface
    %
    figure_w_normalized_uicontrolunits(...
        'Name','Grid Input Parameter',...
        'NumberTitle','off',...
        'NextPlot','new', ...
        ...'Visible','off', ...
        'MenuBar','none',...
        'Position',[ ZG.wex+200 ZG.wey-200 700 275]);
    axis off
    
    % Get list of Mc computation possibilities
    [labelList2] = calc_Mc();
    
    uicontrol('Style','text',...
        'Position',[0.02 0.85 .4 0.1 ],...
        'FontSize',ZmapGlobal.Data.fontsz.m ,...
        'HorizontalAlignment','right',...
        'String','Magnitude of Completeness (Mc) method:');
    
    hMcChoice=uicontrol(...
        'Style','popup',...
        'Position',[0.44 0.85  0.53  0.1],...
        'FontSize',ZmapGlobal.Data.fontsz.m ,...
        'String',labelList2,...
        'callback',@callbackfun_001);
    
    % Set selection to 'Best combination'
    hMcChoice.Value=1;
    
    
    % Edit fields, radiobuttons, and checkbox
    
    % oldfig_button = uicontrol('BackGroundColor',[.60 .92 .84], 'Style','checkbox','String','Plot in Current Figure','Position',[.65 .20 .20 .08]);
    % set(oldfig_button,'value',1);
    
    selOpts = EventSelectionChoice(gcf,'evsel',[22,144],ni,ra);
    
    % Grid options
    gridOpts = GridParameterChoice(gcf,'grid',[351, 83],{dx,'lon'},{dy,'lon'});
    
    % bootstraps
    chKBst_button =  uicontrol('Style','checkbox','Position',[.52 .21 .20 0.08],...
        'HorizontalAlignment','left','String','Mc bootstraps',...
        'FontSize',ZmapGlobal.Data.fontsz.m ,...
        'ToolTipString','Use Bootstrapping','Callback', @callback_bootstrap);
    chkBst_button.Value=0;
    
    uicontrol('Style','text','Position',[.70 .20 .11 0.08],...
        'HorizontalAlignment','right','String','How many?');
    hBootNum=uicontrol('Style','edit',... %active only when bootstrapping
        'Position',[.82 .2 .08 0.08],'String',num2str(nBstSample),...
        'callback',@callbackfun_nbstsmp,'ToolTipString','Number of bootstraps to determine Mc');
    
    
    callback_bootstrap(chkBst_button);
    
    
    uicontrol('Style','text',...
        'Position',[.1 0.35  .21 0.08 ],...
        'HorizontalAlignment','right',...
        'String','Min. No. of events > Mc :');
    
    uicontrol('Style','edit',... %always active
        'Position',[.32 .35 .12 0.08],'String',num2str(Nmin),...
        'callback',@callbackfun_nmin,'ToolTipString','Min # events greater than magnitude of completeness (Mc)');
    %{
        % remarked goup out because fMcFix doesn't seem to be used here
    uicontrol('Style','edit',...
        'Position',[.35 .30 .12 0.08],'String',num2str(fMcFix),...
        'callback',@callbackfun_fmcfix,'ToolTipString','fixed magnitude of completeness (Mc)');
    
    uicontrol('Style','text',...
        'Position',[.05 0.30  .25 0.08 ],...
        'FontSize',ZmapGlobal.Data.fontsz.m ,...
        'HorizontalAlignment','left',...
        'String','Fixed Mc (affects only "Fixed Mc"):');
    %}
    
        
    uicontrol('Style','text',... % always active
        'Position',[.1 0.2  .21 .08 ],...
        'HorizontalAlignment','right',...
        'String','Mc correction for MaxC :');
    
    uicontrol('Style','edit',...
        'Position',[.32 .2 .12 .08],'String',num2str(fMccorr),... %always active
        'callback',@callbackfun_fmcorr,'ToolTipString','Correction term to be added to Mc');
    
    
    
    % Cancel and OK Button's
    uicontrol('Style','Pushbutton',...
        'Position',[.50 .05 .15 .10 ],'callback',@callbackfun_cancel,'String','Cancel');
    
    uicontrol('Style','Pushbutton',...
        'Position',[.70 .05 .15 .10 ],...
        'callback',@callbackfun_go,...
        'String','Go');
    
    
    set(gcf,'visible','on');
    watchoff
 
    %%
    function my_calculate()
        % get the grid-size interactively and
        % calculate the b-value in the grid by sorting
        % thge seimicity and selectiong the ni neighbors
        % to each grid point
        
        map = findobj('Name','Seismicity Map');
        
        if bCreateGrid
            % Select and reate grid
            pause(0.5)
            [newgri, xvect, yvect, ll] = ex_selectgrid(map, dx, dy, bGridEntireArea);
            gx = xvect;
            gy = yvect;
        end
        
        
        if bLoadGrid
            %load file
            
            pause(0.5) %the pause is needed there, because sometimes load was ignored
            [file1,path1] = uigetfile(['*.mat'],'b-value gridfile');
            
            if length(path1) > 1
                
                my_load([path1 file1])
            end
        end
        
        % Plot all grid points
        plot(newgri(:,1),newgri(:,2),'+k')
        
        
        %  make grid, calculate start- endtime etc.  ...
        %
        t0b = min(ZG.primeCatalog.Date)  ;
        n = ZG.primeCatalog.Count;
        teb = max(ZG.primeCatalog.Date) ;
        tdiff = round((teb-t0b)/ZG.bin_dur);
        loc = zeros(3, length(gx)*length(gy));
        
        % loop over  all points
        %
        bvg = [];
        allcount = 0.;
        wai = waitbar(0,' Please Wait ...  ');
        set(wai,'NumberTitle','off','Name','b-value grid - percent done');
        drawnow
        
        % Overall b-value
        [bv magco stan av me mer me2,  pr] =  bvalca3(ZG.primeCatalog,ZG.inb1);
        
        itotal = length(newgri(:,1));
        bvg = nan(itotal,14);
        ZG.bo1 = bv; no1 = ZG.primeCatalog.Count;
        
        % loop over all points
        for i= 1:length(newgri(:,1))
            x = newgri(i,1);y = newgri(i,2);
            allcount = allcount + 1.;
            
            if bUseNiEvents   % take point within r
                b = ZG.primeCatalog.selectRadius(y,x,ra);      % new data per grid point (b) is sorted in distanc
                rd = ra;
            else
                % take first ni points
                [b,rd] = ZG.primeCatalog.selectClosestEvents(y,x,[],ni);      % new data per grid point (b) is sorted in distance
            end
            
            % Number of earthquakes per node
            [nX,nY] = size(b);
            
            % Estimate the completeness and b-value
            ZG.newt2 = b;
            
            if length(b) >= Nmin  % enough events?
                % Added to obtain goodness-of-fit to powerlaw value
                [Mc, Mc90, Mc95, magco, prf]=mcperc_ca3();
                
                [fMc] = calc_Mc(b, ZG.inb1, fBinning, fMccorr);
                l = b.Magnitude >= fMc-(fBinning/2);
                if sum(l) >= Nmin
                    [fMeanMag, fBValue, fStd_B, fAValue] =  calc_bmemag(b.subset(l), fBinning);
                else
                    [fBValue, fStd_B, fAValue] = deal(nan);
                end
                % Set standard deviation ofa-value to NaN;
                fStd_A= NaN; fStd_Mc = NaN;
                
                % Bootstrap uncertainties
                if chKBst_button.Value == 1
                    % Check Mc from original catalog
                    if sum(l) >= Nmin
                        % following line has only b, but maybe should be b.subset(l)
                        [fMc, fStd_Mc, fBValue, fStd_B, fAValue, fStd_A, vMc, mBvalue] = calc_McBboot(b, fBinning, nBstSample, ZG.inb1);
                    else
                        fMc = NaN;
                        %fStd_Mc = NaN; fBValue = NaN; fStd_B = NaN; fAValue= NaN; fStd_A= NaN;
                    end
                else
                    % Set standard deviation ofa-value to NaN;
                    fStd_A= NaN; fStd_Mc = NaN;
                end
                
                
            else
                [fMc, fStd_Mc, fBValue, fStd_B, fAValue, fStd_A, fStdDevB, fStdDevMc,prf, nX] = deal(Nan);
                b = b.subset([]);
            end
            mab = max(b.Magnitude) ;
            if isempty(mab); mab = NaN; end
            
            % Result matrix
            %bvg(allcount,:)  = [bv magco x y rd bv2 stan2 av stan prf  mab av2 fStdDevB fStdDevMc nX];
            bvg(allcount,:)  = [fMc fStd_Mc x y rd fBValue fStd_B fAValue fStd_A prf mab fStdDevB fStdDevMc nX];
            waitbar(allcount/itotal)
        end  % for  newgri
        
        
        catsave3('bvalgrid');
        
        %changed the none error with the positioning of the window
        close(wai)
        watchoff
        
        % plot the results
        % old and valueMap (initially ) is the b-value matrix
        %
        
        myvalues = array2table(bvg,'VariableNames',...
            {
            'Mc value', ... mMc, Mc value'p-value',... mPval, p-Value
            'Mc std', ... mStdMc, Standard deviation Mc
            'x',...
            'y',...
            'Radius [km]', ... vRadiusRes,  Radii of chosen events, Resolution
            'b-value',... mBvalue, b-value
            'b-value std',... mStdB, b-value standard deviation
            'a-value',... mAvalue, a-value
            'a-value std',... mStdA, a-value standard deviation
            'power fit', ... Prmap, Goodness of fit to power-law map
            'max mag?', ... ro, maximum magnitude for node
            'Additional Runs b std',... mStdDevB
            'Additional Runs Mc std',... mStdDevMc
            'Number of Events'...mNumEq, Number of earthquakes
            });
        
        %{
        % normlap2=nan(length(tmpgri(:,1)),1)
        normlap2=nan(length(ll),1)
        % Mc map
        normlap2(ll)= bvg(:,1);
        mMc =reshape(normlap2,length(yvect),length(xvect));
        ... etc
        %}
        
        kll = ll;
    end
    
    %%
    function my_save()
        % save mygrid, myvalues
    end
    
    function my_load()
        % Load exist b-grid
        [file1,path1] = uigetfile(['*.mat'],'b-value gridfile');
        if length(path1) > 1
            
            tmp=load(fullfile(path1, file1));
            myvalues=tmp.myvalues;
            mygrid=tmp.mygrid;
            clear tmp
            
            %{
            ... old load
            % Mc map
            normlap2(ll)= bvg(:,1);
            mMc =reshape(normlap2,length(yvect),length(xvect));
            ... etc
            %}
            view_bva(myvalues, mygrid, 'b-value')
            
        else
            warning('did not load grid or values');
            return
        end
    end
    
    %% Callback functions
    function callbackfun_001(mysrc,~)
        ZG.inb2=mysrc.Value;
    end
    
    function callbackfun_nmin(mysrc,~)
        Nmin=str2double(mysrc.String);
    end
    
    function callbackfun_fmcfix(mysrc,~)
        fMcFix=str2double(mysrc.String);
    end
    
    function callbackfun_nbstsmp(mysrc,~)
        nBstSample=str2double(mysrc.String);
        chKBst_button.Value=1;
    end
    
    function callbackfun_fmcorr(mysrc,~)
        fMccorr=str2double(mysrc.String);
        hMcChoice.Value=1;
    end
    
    function callbackfun_cancel(mysrc,~)
        close;
        
    end
    function callbackfun_go(mysrc,~)
        ZG.inb1=hMcChoice.Value;
        
        dx=gridOpts.dx; 
        dy=gridOpts.dy; 
        bGridEntireArea=gridOpts.GridEntireArea;
        bCreateGrid=gridOpts.CreateGrid;
        bLoadGrid=gridOpts.LoadGrid;
        
        bUseNiEvents=selOpts.UseNumNearbyEvents;
        ni=selOpts.ni;
        ra=selOpts.ra;
        
        %ZG.ra=ra;
        %ZG.ni=ni;
        % oldfig_button=oldfig_button.Value;
        delete(selOpts);
        delete(gridOpts);
        close;
        
        my_calculate();
    end
    function callback_bootstrap(mysrc,~)
        if mysrc.Value
            hBootNum.Enable='on';
        else
            hBootNum.Enable='off';
        end
    end
    
end
